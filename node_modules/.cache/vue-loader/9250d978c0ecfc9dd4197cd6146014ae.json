{"remainingRequest":"/Users/medetkalpebaev/Documents/crm_sistem/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/medetkalpebaev/Documents/crm_sistem/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/medetkalpebaev/Documents/crm_sistem/src/views/Login.vue","mtime":1599595188000},{"path":"/Users/medetkalpebaev/Documents/crm_sistem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/medetkalpebaev/Documents/crm_sistem/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/medetkalpebaev/Documents/crm_sistem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/medetkalpebaev/Documents/crm_sistem/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7bWFwU3RhdGV9IGZyb20gJ3Z1ZXgnCgppbXBvcnQgTWN2VmFsaWRhdGlvbkVycm9ycyBmcm9tICdAL2NvbXBvbmVudHMvVmFsaWRhdGlvbkVycm9ycy52dWUnCmltcG9ydCB7YWN0aW9uVHlwZXN9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9hdXRoJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdNY3ZMb2dpbicsCiAgY29tcG9uZW50czogewogICAgTWN2VmFsaWRhdGlvbkVycm9ycwogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGVtYWlsOiAnJywKICAgICAgcGFzc3dvcmQ6ICcnCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgLi4ubWFwU3RhdGUoewogICAgICBpc1N1Ym1pdHRpbmc6IHN0YXRlID0+IHN0YXRlLmF1dGguaXNTdWJtaXR0aW5nLAogICAgICB2YWxpZGF0aW9uRXJyb3JzOiBzdGF0ZSA9PiBzdGF0ZS5hdXRoLnZhbGlkYXRpb25FcnJvcnMKICAgIH0pCiAgfSwKICBtZXRob2RzOiB7CiAgICBvblN1Ym1pdCgpIHsKICAgICAgdGhpcy4kc3RvcmUKICAgICAgICAuZGlzcGF0Y2goYWN0aW9uVHlwZXMubG9naW4sIHsKICAgICAgICAgIGVtYWlsOiB0aGlzLmVtYWlsLAogICAgICAgICAgcGFzc3dvcmQ6IHRoaXMucGFzc3dvcmQKICAgICAgICB9KQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtuYW1lOiAnZ2xvYmFsRmVlZCd9KQogICAgICAgIH0pCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"auth-page\">\n    <div class=\"container page\">\n      <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 col-xs-12\">\n          <h1 class=\"text-xs-center\">Sign in</h1>\n          <p class=\"text-xs-center\">\n            <router-link :to=\"{name: 'register'}\">\n              Have an account?\n            </router-link>\n          </p>\n          <mcv-validation-errors\n            v-if=\"validationErrors\"\n            :validation-errors=\"validationErrors\"\n          ></mcv-validation-errors>\n          <form @submit.prevent=\"onSubmit\">\n            <fieldset class=\"form-group\">\n              <input\n                class=\"form-control form-control-lg\"\n                type=\"text\"\n                placeholder=\"Email\"\n                v-model=\"email\"\n              />\n            </fieldset>\n            <fieldset class=\"form-group\">\n              <input\n                class=\"form-control form-control-lg\"\n                type=\"password\"\n                placeholder=\"Password\"\n                v-model=\"password\"\n              />\n            </fieldset>\n            <button\n              class=\"btn btn-lg btn-primary pull-xs-right\"\n              :disabled=\"isSubmitting\"\n            >\n              Sign In\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\n\nimport McvValidationErrors from '@/components/ValidationErrors.vue'\nimport {actionTypes} from '@/store/modules/auth'\n\nexport default {\n  name: 'McvLogin',\n  components: {\n    McvValidationErrors\n  },\n  data() {\n    return {\n      email: '',\n      password: ''\n    }\n  },\n  computed: {\n    ...mapState({\n      isSubmitting: state => state.auth.isSubmitting,\n      validationErrors: state => state.auth.validationErrors\n    })\n  },\n  methods: {\n    onSubmit() {\n      this.$store\n        .dispatch(actionTypes.login, {\n          email: this.email,\n          password: this.password\n        })\n        .then(() => {\n          this.$router.push({name: 'globalFeed'})\n        })\n    }\n  }\n}\n</script>\n"]}]}